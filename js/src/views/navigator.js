// Generated by CoffeeScript 1.7.1
(function() {
  var Otalvaro, root,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  root = typeof window !== "undefined" && window !== null ? window : global;

  Otalvaro = root.Otalvaro;


  /*
  Navigation View
  Handles the main NavBar logic, catches the mousedown events, then fires a navigate
  function, that will trigger a route and the router will take care of the actual navigation.
  Also marks the clicked item as the selected one.
   */

  Otalvaro.Views.navigation = (function(_super) {
    __extends(navigation, _super);

    function navigation() {
      this.toggleNavBar = __bind(this.toggleNavBar, this);
      this.markAsSelected = __bind(this.markAsSelected, this);
      this.navigate = __bind(this.navigate, this);
      this.navHandler = __bind(this.navHandler, this);
      return navigation.__super__.constructor.apply(this, arguments);
    }

    navigation.prototype.el = '#mainNav';

    navigation.prototype.events = {
      'mousedown a': 'navHandler',
      'click a': 'preventDefault',
      'click': 'toggleNavBar'
    };

    navigation.prototype.initialize = function() {
      this.$navItems = this.$el.find('a');
      this.currentRoute = '';
      return this.mobileNavStatus = 'closed';
    };

    navigation.prototype.preventDefault = function(e) {
      return e.preventDefault();
    };

    navigation.prototype.navHandler = function(e) {
      var $currentTarget, linkTarget;
      e.stopPropagation();
      e.preventDefault();
      $currentTarget = $(e.currentTarget);
      linkTarget = $currentTarget.attr('href');
      return this.navigate(linkTarget, $currentTarget);
    };

    navigation.prototype.navigate = function(linkTarget, $currentTarget) {
      this.markAsSelected($currentTarget);
      return Backbone.history.navigate(linkTarget, {
        trigger: true
      });
    };

    navigation.prototype.markAsSelected = function($el) {
      var selectedClass;
      selectedClass = 'current_page_item';
      this.$navItems.removeClass(selectedClass);
      return $el.addClass(selectedClass);
    };

    navigation.prototype.findCurrentRoute = function(route) {
      var el, elLink, index, _i, _len, _ref;
      index = 0;
      _ref = this.$navItems;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        el = _ref[_i];
        elLink = $(el).attr('href');
        if (elLink.indexOf(route) !== -1) {
          break;
        } else {
          index++;
        }
      }
      return this.markAsSelected($(this.$navItems[index]));
    };

    navigation.prototype.toggleNavBar = function() {
      if (this.mobileNavStatus === 'closed') {
        return this.openMobileMenu();
      } else if (this.mobileNavStatus === 'open') {
        return this.closeMobileMenu();
      }
    };

    navigation.prototype.openMobileMenu = function() {
      this.$el.addClass('openMenu');
      return this.mobileNavStatus = 'open';
    };

    navigation.prototype.closeMobileMenu = function() {
      this.$el.removeClass('openMenu');
      return this.mobileNavStatus = 'closed';
    };

    return navigation;

  })(Backbone.View);

}).call(this);

//# sourceMappingURL=navigator.map
