// Generated by CoffeeScript 1.7.1
(function() {
  var Otalvaro, root,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  root = typeof window !== "undefined" && window !== null ? window : global;

  Otalvaro = root.Otalvaro;

  Otalvaro.Views.CollectionView = (function(_super) {
    __extends(CollectionView, _super);

    function CollectionView() {
      this.render = __bind(this.render, this);
      this.updateView = __bind(this.updateView, this);
      return CollectionView.__super__.constructor.apply(this, arguments);
    }

    CollectionView.prototype.initialize = function(options) {
      this.collection.bind('change', this.updateView);
      return this.itemViewClass = options.itemViewClass;
    };

    CollectionView.prototype.setView = function(callback) {
      this.fetchCollection(1, false, callback);
      return this;
    };

    CollectionView.prototype.setloadingState = function(state) {
      var fadeClass;
      fadeClass = 'halfFade';
      if (state === 'start') {
        return this.$el.addClass(fadeClass);
      } else if (state === 'end') {
        $('body').css('cursor', 'default');
        return this.$el.removeClass(fadeClass);
      } else {
        return console.warn(state + 'Is not a valid state for seTloadingState');
      }
    };

    CollectionView.prototype.updateView = function() {
      return this.render().el;
    };

    CollectionView.prototype.fetchCollection = function(page, fetchCurrent, callback) {
      if (page == null) {
        page = 1;
      }
      if (fetchCurrent == null) {
        fetchCurrent = false;
      }
      console.log('fetching page collection', page);
      this.setloadingState('start');
      return this.collection.fetch({
        data: {
          page: page
        },
        success: (function(_this) {
          return function() {
            return _this.render(callback);
          };
        })(this),
        error: function(collection, response) {
          console.log('Error while fetching the collection');
          return console.log(response);
        },
        complete: (function(_this) {
          return function() {
            return _this.setloadingState('end');
          };
        })(this)
      });

      /*if(@page isnt page or fetchCurrent)
        @page = page
        @collection.fetch
          data:
            page: page
          success: =>
            @render(callback)
          error: (collection, response)->
            console.log 'Error while fetching the collection'
            console.log response
          complete: =>
            @setloadingState('end')
      
      else
        console.log 'fetchcurrent is false or you are loading the same route'
        @setloadingState('end')
       */
    };

    CollectionView.prototype.render = function(callback) {
      var nodes, _this;
      console.log(this);
      this.$el.empty();
      nodes = [];
      _this = this;
      this.collection.each((function(_this) {
        return function(entry) {
          var itemView;
          itemView = new _this.itemViewClass({
            model: entry
          });
          itemView.delegateEvents();
          return nodes.push(itemView.render().el);
        };
      })(this));
      this.$el.append(nodes);
      callback(this.el);
      return this;
    };

    return CollectionView;

  })(Backbone.View);

}).call(this);

//# sourceMappingURL=base-collection.map
